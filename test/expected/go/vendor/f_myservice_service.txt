// Autogenerated by Frugal Compiler (3.12.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package include_vendor

import (
	"bytes"
	"fmt"

	"github.com/samjxn/frugal/lib/go"
	"github.com/samjxn/frugal/test/out/excepts"
	"github.com/Workiva/some/vendored/place/vendor_namespace"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/sirupsen/logrus"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var _ = logrus.DebugLevel

type FMyService interface {
	vendor_namespace.FVendoredBase

	GetItem(ctx frugal.FContext) (r *vendor_namespace.Item, err error)
}

type FMyServiceClient struct {
	*vendor_namespace.FVendoredBaseClient
	methods map[string]*frugal.Method
}

func NewFMyServiceClient(provider *frugal.FServiceProvider, middleware ...frugal.ServiceMiddleware) *FMyServiceClient {
	methods := make(map[string]*frugal.Method)
	client := &FMyServiceClient{
		FVendoredBaseClient: vendor_namespace.NewFVendoredBaseClient(provider, middleware...),
		methods:             methods,
	}
	middleware = append(middleware, provider.GetMiddleware()...)
	methods["getItem"] = frugal.NewMethod(client, client.getItem, "getItem", middleware)
	return client
}

func (f *FMyServiceClient) GetItem(ctx frugal.FContext) (r *vendor_namespace.Item, err error) {
	ret := f.methods["getItem"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[0] != nil {
		r = ret[0].(*vendor_namespace.Item)
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FMyServiceClient) getItem(ctx frugal.FContext) (r *vendor_namespace.Item, err error) {
	args := MyServiceGetItemArgs{}
	result := MyServiceGetItemResult{}
	err = f.Client_().Call(ctx, "getItem", &args, &result)
	if err != nil {
		return
	}
	if result.D != nil {
		err = result.D
		return
	}
	r = result.GetSuccess()
	return
}

type FMyServiceProcessor struct {
	*vendor_namespace.FVendoredBaseProcessor
}

func NewFMyServiceProcessor(handler FMyService, middleware ...frugal.ServiceMiddleware) *FMyServiceProcessor {
	p := &FMyServiceProcessor{vendor_namespace.NewFVendoredBaseProcessor(handler, middleware...)}
	p.AddToProcessorMap("getItem", &myserviceFGetItem{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.GetItem, "GetItem", middleware))})
	return p
}

type myserviceFGetItem struct {
	*frugal.FBaseProcessorFunction
}

func (p *myserviceFGetItem) Process(ctx frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := MyServiceGetItemArgs{}
	err := args.Read(iprot)
	iprot.ReadMessageEnd()
	if err != nil {
		return p.SendError(ctx, oprot, frugal.APPLICATION_EXCEPTION_PROTOCOL_ERROR, "getItem", err.Error())
	}
	result := MyServiceGetItemResult{}
	ret := p.InvokeMethod([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err = ret[1].(error)
	}
	if err != nil {
		if typedError, ok := err.(thrift.TApplicationException); ok {
			p.SendError(ctx, oprot, typedError.TypeId(), "getItem", typedError.Error())
			return nil
		}
		switch v := err.(type) {
		case *excepts.InvalidData:
			result.D = v
		default:
			return p.SendError(ctx, oprot, frugal.APPLICATION_EXCEPTION_INTERNAL_ERROR, "getItem", "Internal error processing getItem: "+err.Error())
		}
	} else {
		var retval *vendor_namespace.Item = ret[0].(*vendor_namespace.Item)
		result.Success = retval
	}
	return p.SendReply(ctx, oprot, "getItem", &result)
}

type MyServiceGetItemArgs struct {
}

func NewMyServiceGetItemArgs() *MyServiceGetItemArgs {
	return &MyServiceGetItemArgs{}
}

func (p *MyServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MyServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MyServiceGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceGetItemArgs(%+v)", *p)
}

type MyServiceGetItemResult struct {
	Success *vendor_namespace.Item `thrift:"success,0" db:"success" json:"success,omitempty"`
	D       *excepts.InvalidData   `thrift:"d,1" db:"d" json:"d,omitempty"`
}

func NewMyServiceGetItemResult() *MyServiceGetItemResult {
	return &MyServiceGetItemResult{}
}

var MyServiceGetItemResult_Success_DEFAULT *vendor_namespace.Item

func (p *MyServiceGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceGetItemResult) GetSuccess() *vendor_namespace.Item {
	if !p.IsSetSuccess() {
		return MyServiceGetItemResult_Success_DEFAULT
	}
	return p.Success
}

var MyServiceGetItemResult_D_DEFAULT *excepts.InvalidData

func (p *MyServiceGetItemResult) IsSetD() bool {
	return p.D != nil
}

func (p *MyServiceGetItemResult) GetD() *excepts.InvalidData {
	if !p.IsSetD() {
		return MyServiceGetItemResult_D_DEFAULT
	}
	return p.D
}

func (p *MyServiceGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vendor_namespace.NewItem()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) ReadField1(iprot thrift.TProtocol) error {
	p.D = excepts.NewInvalidData()
	if err := p.D.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.D), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MyServiceGetItemResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *MyServiceGetItemResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetD() {
		if err := oprot.WriteFieldBegin("d", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:d: ", p), err)
		}
		if err := p.D.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.D), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:d: ", p), err)
		}
	}
	return nil
}

func (p *MyServiceGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceGetItemResult(%+v)", *p)
}
